version: '3.8'

services:
  # Elasticsearch服务
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: insurance-rag-es
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.name=insurance-rag-cluster
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es_data:/usr/share/elasticsearch/data
      - ./elasticsearch/plugins:/usr/share/elasticsearch/plugins
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Kibana服务（可选，用于ES可视化管理）
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: insurance-rag-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    ports:
      - "5601:5601"
    networks:
      - rag-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    profiles:
      - debug

  # RAG API服务
  rag-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: insurance-rag-api
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ES_HOST=elasticsearch
      - ES_PORT=9200
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
    volumes:
      - ./uploads:/app/uploads
      - ./output:/app/output
      - ./vector_store:/app/vector_store
      - ./logs:/app/logs
      - ./.env:/app/.env
      # 挂载PDF文件
      - ./AIA FlexiAchieverSavingsPlan_tc-活享儲蓄計劃.pdf:/app/AIA FlexiAchieverSavingsPlan_tc-活享儲蓄計劃.pdf
      - ./RoyalFortune_Product Brochure_EN.pdf:/app/RoyalFortune_Product Brochure_EN.pdf
    ports:
      - "8000:8000"
    networks:
      - rag-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Waiting for Elasticsearch to be ready...' &&
        sleep 10 &&
        python -c 'from es_pdf_pipeline import ESIndexer; indexer = ESIndexer(); indexer.create_index()' &&
        echo 'Starting API server...' &&
        uvicorn es_rag_api:app --host 0.0.0.0 --port 8000 --reload
      "

  # Nginx反向代理（可选，用于生产环境）
  nginx:
    image: nginx:alpine
    container_name: insurance-rag-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./web_demo_enhanced.html:/usr/share/nginx/html/index.html:ro
      - ./web_demo.html:/usr/share/nginx/html/demo.html:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - rag-network
    depends_on:
      - rag-api
    profiles:
      - production

networks:
  rag-network:
    driver: bridge

volumes:
  es_data:
    driver: local